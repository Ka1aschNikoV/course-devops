stages:
  - lint
  - build
  - test
  - deploy

variables:
  COMPOSE_PROJECT_NAME: "devops-project"  # Isolates the test environment
  COMPOSE_FILE: "docker-compose.yml" # Use a separate compose file for testing
  SSH_KNOWN_HOSTS: "86.50.231.95"
  
eslint-job:
  stage: lint
  image: node:latest
  before_script:
    - npm install
  script:
    - npm run lint
  only:
    - project


build-job:
  stage: build
  image: docker:latest # Docker-in-Docker support
  services:
    - name: docker:24.0.2-dind # Docker daemon in the CI runner
      alias: dockerdind
  variables:
    DOCKER_HOST: tcp://dockerdind:2375/

    DOCKER_TLS_CERTDIR: ""

    DOCKER_DRIVER: overlay2

  before_script:
    - apk add docker-compose docker
    #- echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u dpniva --password-stdinr
    
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u dpniva --password-stdin
    - sleep 10
    - docker-compose -f docker-compose.yml build
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u dpniva --password-stdin
    - docker-compose -f docker-compose.yml push
    

  only:
    - project 


test-job:
  stage: test
  image: docker:latest # Docker-in-Docker support
  services:
    - name: docker:24.0.2-dind # Docker daemon in the CI runner
      alias: dockerdind
  variables:
    DOCKER_HOST: tcp://dockerdind:2375/

    DOCKER_TLS_CERTDIR: ""

    DOCKER_DRIVER: overlay2

  before_script:
    - apk add docker-compose docker npm nodejs
    - npm install
    - echo "$CI_REGISTRY_PASSWORD" | docker login compse140.devops-gitlab.rd.tuni.fi:5050 -u dpniva --password-stdin 

  script:
    - docker-compose -f docker-compose.yml up -d
    - sleep 10
    - docker exec test_container npm test
    - docker-compose down # Stop
  only:
    - project 

deploy-server:
  stage: deploy
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo "$SSH_SERVER_KEY" | tr -d '\r' > ~/.ssh/id_rsa  # Write the private key to a file
    - chmod 600 ~/.ssh/id_rsa  # Set appropriate permissions for the private key

    # Add the server's SSH fingerprint to known_hosts to avoid "Host key verification failed" error
    - ssh-keyscan -H 86.50.231.95 >> ~/.ssh/known_hosts

    # Set the correct permissions for known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh -i ~/.ssh/devopper.pem ubuntu@86.50.231.95 "mkdir -p ~/devopper"
    - ssh -i ~/.ssh/devopper.pem ubuntu@86.50.231.95 "cd ~/devopper"
    - ssh -i ~/.ssh/devopper.pem ubuntu@86.50.231.95 "docker-compose pull"
    - ssh -i ~/.ssh/devopper.pem ubuntu@86.50.231.95 "docker-compose up -d"
  only:
    - project
