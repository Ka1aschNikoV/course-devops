stages:
  - lint
  - test
  #- build
  - deploy

variables:
  COMPOSE_PROJECT_NAME: "ci-test-cluster"  # Isolates the test environment
  COMPOSE_FILE: "docker-compose.yml" # Use a separate compose file for testing

eslint-job:
  stage: lint
  image: node:latest
  script:
    - npm install
    - npm run lint
  only:
    - project


test-job:
  stage: test
  image: docker:24.0.2 # Docker-in-Docker support
  services:
    - docker:24.0.2-dind # Docker daemon in the CI runner
    command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_OPTS: --dns 8.8.8.8
  before_script:
    - apk add --no-cache docker-compose
    - docker-compose -f ${COMPOSE_FILE} up -d # Start the cluster
  script:
    - docker-compose -f ${COMPOSE_FILE} ps # Check cluster status
    - docker-compose -f ${COMPOSE_FILE} exec app npm test # Run tests inside the app container
  after_script:
    - docker-compose -f ${COMPOSE_FILE} down # Tear down the cluster
  only:
    - project 


#docker-build-job:
  
#  stage: build
#  image: docker:latest
#  services:
#    - name: docker:19.03.12-dind  # Docker-in-Docker service
#      alias: docker
#  variables:
#    DOCKER_HOST: tcp://docker:2375  # Configure Docker CLI to use Docker-in-Docker
#    DOCKER_DRIVER: overlay2
#  script:
#    - echo "Building and starting services with Docker Compose"
    #- docker ps -a
    
    # Remove all containers 
    #- docker rm -f backend3-1c
    #- docker rm -f backend2-1
    #- docker rm -f backend1-1
    #- docker rm -f service2
    #- docker rm -f nginx_frontend
    #- docker rm -f redis
#    - apk add --no-cache docker-compose
#    - docker-compose up --build -d  # Use -d to run detached

deploy-prod:
  stage: deploy
  script:
    - echo "Deploying to production"
    #- docker compose down  # Optional: Clean up services after deployment
  environment: production
