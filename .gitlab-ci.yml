stages:
  - lint
  - build
  - test
  - deploy

variables:
  COMPOSE_PROJECT_NAME: "course-devops"  # Isolates the test environment
  COMPOSE_FILE: "docker-compose.yml" # Use a separate compose file for testing
  
eslint-job:
  stage: lint
  image: node:latest
  script:
    - npm install
    - npm run lint
  only:
    - project


build-job:
  stage: build
  image: docker:24.0.2 # Docker-in-Docker support
  #services:
  #  - name: docker:24.0.2-dind # Docker daemon in the CI runner
  #    alias: dockerdind
  variables:
  #  DOCKER_HOST: tcp://dockerdind:2375/
  #  DOCKER_CACHE_DIR: /cache/docker
    DOCKER_TLS_CERTDIR: ""
    #DOCKER_OPTS: --dns 0.0.0.0
    DOCKER_DRIVER: overlay2
  #cache:
  #  key: "$CI_JOB_NAME-docker-cache"
  #  paths:
  #    - $DOCKER_CACHE_DIR
  before_script:
    - apk add docker-compose npm nodejs
  script:
    - docker compose -f ${COMPOSE_FILE} up -d # Start the cluster
    
    - docker network ls
    - docker ps

    - docker exec test_container npm test

    - docker compose down # Start the cluster
  only:
    - project 
  artifacts:
    paths:
      - docker-compose.yml  # Save the docker-compose file or any other artifacts
    expire_in: 1 hour  # Make artifacts available for an hour or longer


test-job:
  stage: test
  image: node:latest
  services:
    - docker:24.0.2-dind   # Docker-in-Docker service to run docker-compose in the test job
  dependencies: 
    - build-job
  before_script:
    - apk add --no-cache docker-compose
    - docker-compose -f ${COMPOSE_FILE} up -d  # Start the containersc
    - export DOCKER_HOST=tcp://dockerdind:2375
  script:
    - npm install
    - npm test
    - docker-compose down
  only:
    - project

#docker-build-job:
  
#  stage: build
#  image: docker:latest
#  services:
#    - name: docker:19.03.12-dind  # Docker-in-Docker service
#      alias: docker
#  variables:
#    DOCKER_HOST: tcp://docker:2375  # Configure Docker CLI to use Docker-in-Docker
#    DOCKER_DRIVER: overlay2
#  script:
#    - echo "Building and starting services with Docker Compose"
    #- docker ps -a
    
    # Remove all containers 
    #- docker rm -f backend3-1c
    #- docker rm -f backend2-1
    #- docker rm -f backend1-1
    #- docker rm -f service2
    #- docker rm -f nginx_frontend
    #- docker rm -f redis
#    - apk add --no-cache docker-compose
#    - docker-compose up --build -d  # Use -d to run detached

deploy-prod:
  stage: deploy
  script:
    - echo "Deploying to production"
    #- docker compose down  # Optional: Clean up services after deployment
  environment: production
