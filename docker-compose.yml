services:
  

  nginx:
    image: nginx:latest
    container_name: nginx_frontend
    
    build:
      dockerfile: DockerNginx
      context:  ./nginx/
    # Only nginx is accessible from outside
    ports:
    # Browser port
      - "8198:8198"
    # Test port
      - "8197:8197"
    
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - frontend_network

  api:
    image: api:latest
    container_name: api_gateway
    command: sh -c "npm install && npm start"
    build:
      dockerfile: DockerApi
      context: ./api/
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports: 
    # Testing port
      - "8196:8196"

    networks:
      - frontend_network
    

  backend1:
    image: service1:latest
    container_name: backend1-1
    command: sh -c "npm install && npm start"
    build:
      dockerfile: Docker1
      context:  ./service1/
    # Only service1 accessible nginx
    expose:
     - 8199

    # Allow termination of containers with this volume
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend_network
      - backend

  backend2:
    image: service1:latest
    container_name: backend2-1
    command: sh -c "npm install && npm start"
    build:
      dockerfile: Docker1
      context:  ./service1/
    # Only service1 accessible nginx
    expose:
     - 8199
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend_network
      - backend

  backend3:
    image: service1:latest
    container_name: backend3-1
    command: sh -c "npm install && npm start"
    build:
      dockerfile: Docker1
      context:  ./service1/
    # Only service1 accessible nginx
    expose:
     - 8199
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend_network
      - backend

  service2:
    image: service2:latest
    command: sh -c "mvn package && java -cp target/service2-1.0-SNAPSHOT.jar service2.App"
    container_name: service2
    build:
      dockerfile: Docker2
      context:  ./service2/
    expose:
      - 8200
    networks:
      - backend

networks:
  # Connection between load balanced servers and service2
  backend:
    driver: bridge
  # Connection between Nginx front and load balanced servers
  frontend_network:
    driver: bridge
