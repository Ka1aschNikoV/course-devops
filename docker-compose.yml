services:
  
  # Test container to run tests, could be killed in production but isn't
  test:
    image: compse140.devops-gitlab.rd.tuni.fi:5050/dpniva/devops-project/test:latest
    container_name: test_container
    command: sh -c "npm install && npm start"
    build:
      dockerfile: DockerTest
      context: ./test/
    
    networks: 
      - test_network
      # - gitlab-runner_default
  nginx:
    image: compse140.devops-gitlab.rd.tuni.fi:5050/dpniva/devops-project/nginx:latest
    container_name: nginx_frontend
    
    build:
      dockerfile: DockerNginx
      context:  ./nginx/
    # Only nginx is accessible from outside
    ports:
    # Browser port
      - "8198:8198"
    # Test port
      - "8197:8197"
    #expose: 
    #  - 8197
    #  - 8198
    volumes:
      - nginx-logs:/var/log/nginx
    
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - test_network
      - frontend_network
     # - gitlab-runner_default

  backend1:
    image: compse140.devops-gitlab.rd.tuni.fi:5050/dpniva/devops-project/service1:latest
    container_name: backend1-1
    command: sh -c "npm install && npm start" && /bin/sh -c "cp ./run-log.log /shared/run-logs/run-log.log"
    build:
      dockerfile: Docker1
      context:  ./service1/
    # Only service1 accessible nginx
    expose:
     - 8199
    depends_on:
      - redis
    # Allow termination of containers with this volume
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - nginx-logs:/shared/nginx-logs
      - run-logs:/shared/run-logs

    networks:
      - frontend_network
      - backend
     #  - gitlab-runner_default
    environment:
      REDIS_HOST: redis

  backend2:
    image: compse140.devops-gitlab.rd.tuni.fi:5050/dpniva/devops-project/service1:latest
    container_name: backend2-1
    command: sh -c "npm install && npm start" && /bin/sh -c "cp ./run-log.log /shared/run-logs/run-log.log"
    build:
      dockerfile: Docker1
      context:  ./service1/
    # Only service1 accessible nginx
    expose:
     - 8199
    depends_on:
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - nginx-logs:/shared/nginx-logs
      - run-logs:/shared/run-logs
    networks:
      - frontend_network
      - backend
     #  - gitlab-runner_default
    environment:
      REDIS_HOST: redis

  backend3:
    image: compse140.devops-gitlab.rd.tuni.fi:5050/dpniva/devops-project/service1:latest
    container_name: backend3-1
    command: sh -c "npm install && npm start" && /bin/sh -c "cp ./run-log.log /shared/run-logs/run-log.log"
    build:
      dockerfile: Docker1
      context:  ./service1/
    # Only service1 accessible nginx
    expose:
     - 8199
    depends_on:
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - nginx-logs:/shared/nginx-logs
      - run-logs:/shared/run-logs
    networks:
      - frontend_network
      - backend
     #  - gitlab-runner_default
    environment:
      REDIS_HOST: redis

  service2:
    image: compse140.devops-gitlab.rd.tuni.fi:5050/dpniva/devops-project/service2:latest
    command: sh -c "mvn package && java -cp target/service2-1.0-SNAPSHOT.jar service2.App"
    container_name: service2
    build:
      dockerfile: Docker2
      context:  ./service2/
    expose:
      - 8200
    networks:
      - backend
  
  # State storage
  redis:
    image: redis:latest
    container_name: redis
    networks:
      - frontend_network
     # - gitlab-runner_default

networks:
  # Connection between load balanced servers and service2
  backend:
    driver: bridge
  # Connection between Nginx front and load balanced servers
  frontend_network:
    driver: bridge

  test_network:
    driver: bridge
  #gitlab-runner_default:
   # driver: bridge
volumes:
  nginx-logs:
  run-logs:
  
